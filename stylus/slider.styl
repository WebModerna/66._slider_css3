// Mi propio slider hecho sólo con CSS

// Normalizando 
@import 'normalize.css'
@import 'funciones'
@import 'node_modules/nib/index'

// Para dar un centrado y que todo se contenga en las cajas
*
	box-sizing border-box
	text-align center

// Oculta todas las barras de desplazamiento
::-webkit-scrollbar
	display none


// La cantidad de imágenes a mostrar
$items = 4

// El tiempo en el cual una imagen se mostrará
$tiempo_mostrar = 3

// El tiempo total de todas las animaciones conjunto
$tiempo_total = $tiempo_mostrar * $items


// El cuerpo de la web
.slider
	&__cuerpo
		margin 0
		overflow hidden
	
	// El contenedor del Slider
	&__contenedor
		margin 0
		height 100vh
		position relative
		width 100vw
	
	// Un pequeño cuadro con contenido dentro de cada slider
	&__leyenda
		display flex
		justify-content center
		align-items center
		height 100vh

		&__contenido
			background rgba(5,5,5,0.7)
			border-radius 0.5em
			box-shadow 5px 5px 10px 5px #000
			color pink
			font-size 20px
			font-weight bold
			line-height 40px
			// Posicionando la leyenda siempre en el centro
			padding 1em 2em
			position relative
	
	// Cada uno de los Sliders
	&__item
		background-color #fff
		background-position 50% 50%
		background-repeat no-repeat
		background-size(cover)
		box-sizing border-box
		height 100vh
		text-align center
		width 100vw

// Bucle que crea los backgrounds
for $i in 1..$items
	div[ data-animacion = slider__item_{$i} ].slider__item
		background-image url('../img/img' + ($i) + '.jpg')
		transition 0.2s all ease-in-out
		

/*
=========================================
Bucle: crea los nombres de las animaciones
Por fórmula coloca una imagen previamente numerada en la carpeta /img
Las imágenes deben llamarse "img[número de orden].jpg". Por ejemplo: img1.jpg, img2.jpg, y así sucesivamente.
========================================
*/

// Efecto Fadeing
.contenedor__fadeing
	display flex
	overflow hidden
	position relative

.animacion__fadeing
	animation-delay 0
	animation-duration $tiempo_total s
	animation-iteration-count infinite
	animation-timing-function ease-in-out
	display table
	left 0
	position absolute
	top 0

// Desarrollo del Bucle
for $i in 1..$items
	div[ data-animacion = slider__item_{$i} ].animacion__fadeing
		
		// El nombre de la animación numerada
		animation-name fadeing_ + $i
		opacity 0
	
	// En base al orden de cada una de las imágenes
	@keyframes { fadeing_ + $i }
		for a in 0..$tiempo_total
			// Para ir creando segmentos de tiempo en los cuales deben mostrarse.
			if a < $i * $tiempo_mostrar && a >= $i * $tiempo_mostrar - $tiempo_mostrar
				{ 100% * a / $tiempo_total }
					opacity 1
			
			// El primer slider en el último fotograma lo tenemos que mostrar, de lo contrario hay un parpadeo cuando el bucle comienza.
			else if a == $tiempo_total && $i == 1
				{ 100% * a / $tiempo_total }
					opacity 1
			
			// Se ocultan los slider en los fotogramas que están fuera del segmento asignado
			else
				{ 100% * a / $tiempo_total }
					opacity 0


/*
=========================================
El CARROUSEL.
Tiene la misma generación de las imágnes, pero su funcionamiento es diferente.
Bucle: crea los nombres de las animaciones
Por fórmula coloca una imagen previamente numerada en la carpeta /img
Las imágenes deben llamarse "img[número de orden].jpg". Por ejemplo: img1.jpg, img2.jpg, y así sucesivamente.
El bucle generador de las animaciones es diferente: al primer slider lo tiene que mostar en la posición cero en el primer tramo del tiempo y dejarlo justo en la derecha, antes de que se acabe el tiempo.
A medida que los segmentos temporales avanzan, uno a uno todos los sliders se irán desplazando a la izquierda de 100vw en 100vw.
Deben tener la propiedad de poder moverlos con la mano, cursor y touch screen (ideal para móviles).
Los slider primero y último tendrán un movimiento particular al terminar la animación total, justo antes de que comienzen de nuevo.
========================================
*/

// Efecto de carrousel
.contenedor__carrousel
	display flex
	overflow-x scroll
	overflow-y hidden
	scroll-snap-type x mandatory
	width 100%

.animacion__carrousel
	animation-delay 0
	animation-duration $tiempo_total s
	animation-iteration-count infinite
	animation-timing-function ease-in-out
	position relative
	flex 0 0 100%
	min-width 100%
	object-fit cover
	scroll-snap-align center
	width 100%


for $e in 1..$items
	div[data-animacion={'"'}slider__item_{$e}{'"'}].animacion__carrousel
		animation-name carrousel_ + $e
		left 0

		@keyframes { carrousel_ + $e }
			for b in 0..$tiempo_total
				if b == 0
					{ 100% * b / $tiempo_total }
						left 0

				else if b >= $tiempo_mostrar * ( $e - 1 ) && b < $tiempo_total - $tiempo_mostrar * $e
					{ 100% * b / $tiempo_total }
						left $e * (-100) vw
					
				/*
				else if b == $tiempo_total
					{ 100% * b / $tiempo_total }
						$posicion_final = 100 - $posicion_inicial
						left $posicion_final vw

				else if b >= $tiempo_mostrar * ( $e - 1 ) && b < $tiempo_total - $tiempo_mostrar * $e
					{ 100% * b / $tiempo_total }
						left 0
				
				else
					{ 100% * b / $tiempo_total }
						$posicion_final = 100 - $posicion_inicial
						left $posicion_final vw*/
